import java.text.DateFormat

apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "com.lrs.test"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        flavorDimensions "versionCode"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        packagingOptions {
            exclude "lib/arm64-v8a/libimagepipeline.so" //引入RN后出现缺少.so的crash
        }
    }


    signingConfigs {
        release {
            storeFile file("release.keystore")
            storePassword "test1234"
            keyAlias "release"
            keyPassword "test1234"
        }
    }


    buildTypes {

        Date date = new Date();
        String d = date.toLocaleString();
        debug {//debug版本使用一个自动创建的密钥/证书，并使用已知的name/password来签名(防止构建过程中出现请求提示)。
            minifyEnabled false
            debuggable true
            jniDebuggable true
        }
        release {//release版本在构建过程中没有签名，需要稍后签名。
            minifyEnabled false //是否开起混淆
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
//    /**
//     * 产品定制,defaultConfig为所有的flavor提供默认的配置，
//     * 每个flavor都可以覆盖配置项的值。他们享有共同的属性；
//     * 通常，Build Type配置会覆盖其他配置。例如Build Type‘的packageNameSuffix
//     * 会添加到Product Flavor‘的 packageName上。
//     * flavor的名字不能喝已有的构建类型(Build Type)名字冲突，或者和androidTest这个sourceSet的名字冲突。
//     */
//    productFlavors {
//
//        tencent {
//
//        }
//
//        xiaomi {
//
//        }
//
//        huawei {
//
//        }
//
//    }

    String formPath = ".\\raw\\a.mp3";
    String toPath = ".\\assert\\b.mp3";
    copy {
        from(formPath, {
            include("---")
        })

        into(toPath)
    }

    print formPath; print(toPath)
    println "---------------------$name------------------" + project.description + "--------->"
    tasks.each {
        println "----->" + it.name
    }
    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet true
        // if true, stop the gradle build if errors are found
        abortOnError false
        // if true, only report errors
        ignoreWarnings true
        // if true, emit full/absolute paths to files with errors (true by default)
        //absolutePaths true
        // if true, check all issues, including those that are off by default
        checkAllWarnings true
        // if true, treat all warnings as errors
        warningsAsErrors true
        // turn off checking the given issue id's
        disable 'TypographyFractions', 'TypographyQuotes'
        // turn on the given issue id's
        enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        // check *only* the given issue id's
        check 'NewApi', 'InlinedApi'
        // if true, don't include source code lines in the error output
        noLines true
        // if true, show all locations for an error, do not truncate lists, etc.
        showAll true
        // Fallback lint configuration (default severities, etc.)
        lintConfig file("default-lint.xml")
        // if true, generate a text report of issues (false by default)
        textReport true
        // location to write the output; can be a file or 'stdout'
        textOutput 'stdout'
        // if true, generate an XML report for use by for example Jenkins
        xmlReport false
        // file to write report to (if not specified, defaults to lint-results.xml)
        xmlOutput file("lint-report.xml")
        // if true, generate an HTML report (with issue explanations, sourcecode, etc)
        htmlReport true
        // optional path to report (default will be lint-results.html in the builddir)
        htmlOutput file("lint-report.html")

        // set to true to have all release builds run lint on issues with severity=fatal
        // and abort the build (controlled by abortOnError above) if fatal issues are found
        checkReleaseBuilds true
        // Set the severity of the given issues to fatal (which means they will be
        // checked during release builds (even if the lint target is not included)
        fatal 'NewApi', 'InlineApi'
        // Set the severity of the given issues to error
        error 'Wakelock', 'TextViewEdits'
        // Set the severity of the given issues to warning
        warning 'ResourceAsColor'
        // Set the severity of the given issues to ignore (same as disabling the check)
        ignore 'TypographyQuotes'
    }


    android.applicationVariants.all {
        out -> println("----------------------->"+out.getSourceSets())
    }


}
configurations.all {
    resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation project(':log')
    implementation project(':network')
    implementation project(':share')
    implementation project(':util')
    implementation project(':view')
    compile 'io.reactivex:rxjava:1.0.14'
    compile 'io.reactivex:rxandroid:1.0.1'
    compile 'com.facebook.react:react-native:0.20.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.android.support:design:26.1.0'
    implementation 'com.android.support:support-v4:27.0.1'
}


print("-->$name" + "-->" + getProject().getAllTasks(true))


def getTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}